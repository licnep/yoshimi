# data file for the Fltk User Interface Designer (fluid)
version 1.0110
header_name {.h}
code_name {.cc}
comment {PartUI.h} {not_in_source in_header
}

comment {PartUI.cc} {in_source not_in_header
}

comment {Original ZynAddSubFX author Nasca Octavian Paul
Copyright (C) 2002-2005 Nasca Octavian Paul
Copyright 2009-2010, Alan Calvert

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of version 2 of the GNU General Public
License as published by the Free Software Foundation.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

This file is a derivative of a ZynAddSubFX original, modified December 2010
} {in_source in_header
}

decl {\#include "EffUI.h"
    \#include "ProgramBanksUI.h"
    \#include "ADnoteUI.h"
    \#include "SUBnoteUI.h"
    \#include "PADnoteUI.h"
    \#include "Params/Controller.h"
    \#include "Misc/MiscFuncs.h"
    \#include "Misc/Part.h"
    \#define MAX_INFO_TEXT_SIZE 256
    class PartUI;} {public global
}

decl {\#include <FL/fl_file_chooser.H>
    \#include <FL/fl_ask.H>
    \#include "Sql/ProgramBanks.h"
    \#include "Misc/Config.h"
    \#include "Misc/SynthEngine.h"
    \#include "MasterUI.h"} {global
}

class PartSysEffSend {open : {public Fl_Group, private MiscFuncs}
} {
  Function {make_window(void)} {private return_type void
  } {
    Fl_Window syseffsend {open
      private xywh {916 1069 150 145} type Double hide
      class Fl_Group
    } {
      Fl_Dial {} {
        label 01
        callback {synth->setPsysefxvol(npart,neff, o->value());}
        xywh {0 0 25 25} box ROUND_UP_BOX labelsize 10 align 130 maximum 127 step 1
        code0 {o->size(27, 27);}
        code1 {o->value(synth->Psysefxvol[neff][npart]);}
        code2 {o->copy_label(asString(neff + 1).c_str());}
        class WidgetPDial
      }
    }
  }
  Function {PartSysEffSend(int x, int y, int w, int h) :
    Fl_Group(x, y, w, h, NULL)} {open
  } {
    code {neff = 0; npart = 0;} {}
  }
  Function {init(int npart_,int neff_)} {return_type void
  } {
    code {npart = npart_;
        neff = neff_;
        make_window();
        syseffsend->show();
        end();} {}
  }
  Function {~PartSysEffSend()} {} {
    code {syseffsend->hide();} {}
  }
  decl {int neff;} {}
  decl {int npart;} {}
}

class PartKitItem {open : {public Fl_Group}
} {
  Function {make_window(void)} {open private return_type void
  } {
    Fl_Window partkititem {open
      xywh {596 978 670 30} type Single color 50 hide
      class Fl_Group
    } {
      Fl_Group partkititemgroup {open
        xywh {55 0 605 20} box FLAT_BOX color 50
        code0 {//
            if (part->kit[n].Penabled)
                o->activate();
            else
                o->deactivate();}
      } {
        Fl_Spinner minkcounter {
          callback {//
              part->kit[n].Pminkey=(int)o->value();
              partui->setSaveRequired();}
          xywh {220 0 45 15} color 50 labeltype NO_LABEL labelsize 11 minimum 0 maximum 128 textsize 11
          code0 {o->range(0.0, 127.0);o->step(1.0);}
          code1 {//
              o->value(part->kit[n].Pminkey);}
        }
        Fl_Button {} {
          label m
          callback {//
              if (part->lastnote >= 0)
                  minkcounter->value(part->lastnote);
              minkcounter->do_callback();
              maxkcounter->do_callback();}
          tooltip {set the minimum key to the last pressed key} xywh {280 3 15 12} box THIN_UP_BOX color 50 labelsize 10
        }
        Fl_Button {} {
          label M
          callback {//
              if (part->lastnote >= 0)
                  maxkcounter->value(part->lastnote);
              maxkcounter->do_callback();
              minkcounter->do_callback();}
          tooltip {set the maximum key to the last pressed key} xywh {310 3 15 12} box THIN_UP_BOX color 50 labelsize 10
        }
        Fl_Button {} {
          label R
          callback {//
              minkcounter->value(0);
              minkcounter->do_callback();
              maxkcounter->value(127);
              maxkcounter->do_callback();}
          tooltip {reset the minimum key to 0 and maximum key to 127} xywh {295 3 15 12} box THIN_UP_BOX color 50 labelfont 1 labelsize 10
        }
        Fl_Button adeditbutton {
          label edit
          callback {//
              partui->showparameters(n, 0);
              partui->setSaveRequired();}
          xywh {415 0 40 15} box THIN_UP_BOX color 50 labelsize 11
          code0 {//
              if (part->kit[n].Padenabled==0)
                  o->deactivate();}
          code1 {//
              if (n == 0)
                  o->hide();}
        }
        Fl_Button subeditbutton {
          label edit
          callback {//
              partui->showparameters(n, 1);
              partui->setSaveRequired();}
          xywh {485 0 40 15} box THIN_UP_BOX color 50 labelsize 11
          code0 {//
              if (part->kit[n].Psubenabled == 0)
                  o->deactivate();}
          code1 {//
              if (n == 0)
                  o->hide();}
        }
        Fl_Check_Button mutedcheck {
          callback {//
            part->kit[n].Pmuted = lrintf(o->value());
            partui->setSaveRequired();}
          xywh {55 0 20 15} down_box DOWN_BOX color 50 labelfont 1 labelsize 11 align 4
          code0 {//
              o->value(part->kit[n].Pmuted);}
        }
        Fl_Counter maxkcounter {
          callback {//
              part->kit[n].Pmaxkey = (int)o->value();
              partui->setSaveRequired();}
          xywh {330 0 55 15} type Simple color 50 labelsize 12 minimum 0 maximum 128 step 1 textsize 12
          code0 {//
              o->value(part->kit[n].Pmaxkey);}
        }
        Fl_Button labelbutton {
          label {Bass Drum}
          callback {//
              const char *tmp = fl_input("Kit item name:", part->kit[n].Pname.c_str());
              if (tmp != NULL)
              {
                  part->kit[n].Pname = string(tmp);
                  o->copy_label(part->kit[n].Pname.c_str());
                  partui->setSaveRequired();
              }
          }
          xywh {85 0 130 15} box THIN_DOWN_BOX down_box FLAT_BOX color 50 labelfont 1 labelsize 10 align 20
          code0 {//
              o->copy_label(part->kit[n].Pname.c_str());}
        }
        Fl_Check_Button adcheck {
          callback {//
              part->kit[n].Padenabled = o->value();
              if (part->kit[n].Padenabled)
                  adeditbutton->activate();
              else
                  adeditbutton->deactivate();
              partui->setSaveRequired();}
          private xywh {395 0 20 15} down_box DOWN_BOX color 50 labelfont 1 labelsize 11 align 4
          code0 {o->value(part->kit[n].Padenabled);}
          code1 {if (n==0) o->hide();}
        }
        Fl_Check_Button subcheck {
          callback {//
              part->kit[n].Psubenabled = o->value();
              if (part->kit[n].Psubenabled)
                  subeditbutton->activate();
              else
                  subeditbutton->deactivate();
              partui->setSaveRequired();}
          private xywh {465 0 20 15} down_box DOWN_BOX color 50 labelfont 1 labelsize 11 align 4
          code0 {o->value(part->kit[n].Psubenabled);}
          code1 {if (n==0) o->hide();}
        }
        Fl_Choice sendtoeffect {
          callback {//
              if (o->value())
                  part->kit[n].Psendtoparteffect = o->value() - 1;
              else
                  part->kit[n].Psendtoparteffect = 127;
              partui->setSaveRequired();}
          xywh {605 0 45 15} down_box BORDER_BOX color 50 labelsize 10 align 5 textfont 1 textsize 10
          code0 {o->add("OFF"); char nrstr[10]; for(int i = 0; i < NUM_PART_EFX; i++) {sprintf(nrstr,"FX%d",i+1);o->add(nrstr);};}
          code1 {o->value(part->kit[n].Psendtoparteffect+1);if (part->kit[n].Psendtoparteffect==127) o->value(0);}
        } {}
        Fl_Button padeditbutton {
          label edit
          callback {//
              partui->showparameters(n, 2);
              partui->setSaveRequired();}
          xywh {555 0 40 15} box THIN_UP_BOX color 50 labelsize 11
          code0 {if (part->kit[n].Ppadenabled==0) o->deactivate();}
          code1 {if (n==0) o->hide();}
        }
        Fl_Check_Button padcheck {
          callback {//
              part->kit[n].Ppadenabled = o->value();
              if (part->kit[n].Ppadenabled)
                  padeditbutton->activate();
              else
                  padeditbutton->deactivate();
              partui->setSaveRequired();}
          private xywh {535 0 20 15} down_box DOWN_BOX color 50 labelfont 1 labelsize 11 align 4
          code0 {o->value(part->kit[n].Ppadenabled);}
          code1 {if (n==0) o->hide();}
        }
      }
      Fl_Check_Button enabledcheck {
        label 01
        callback {//
            int answer = 1;
            if (o->value() == 0)
                answer = fl_choice("Delete the item?","No","Yes",NULL);
            if (answer != 0)
            {
                synth->lockSharable(); // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                part->setkititemstatus(n, o->value());
                synth->unlockSharable(); // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                partui->setSaveRequired();
                if (o->value() == 0)
                    partkititemgroup->deactivate();
                else
                    partkititemgroup->activate();
                o->redraw();
                partui->showparameters(n, -1); // use to delete the ui, if it is not to item 0
            }
            else
                o->value(1);}
        private xywh {30 0 20 15} down_box DOWN_BOX color 50 labeltype ENGRAVED_LABEL labelsize 12 align 4
        code0 {snprintf(label,10,"%d",n+1);o->label(label);}
        code1 {o->value(part->kit[n].Penabled);}
        code2 {if (n==0) o->deactivate();}
      }
    }
  }
  Function {PartKitItem(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {open
  } {
    code {//
        n = 0;
        part = NULL;} {}
  }
  Function {refresh(void)} {open return_type void
  } {
    code {//
        enabledcheck->value(part->kit[n].Penabled);
        if (!part->kit[n].Penabled)
            partkititemgroup->deactivate();
        else
            partkititemgroup->activate();
        mutedcheck->value(part->kit[n].Pmuted);
        labelbutton->label(part->kit[n].Pname.c_str());
        minkcounter->value(part->kit[n].Pminkey);
        maxkcounter->value(part->kit[n].Pmaxkey);
        adcheck->value(part->kit[n].Padenabled);
        adcheck->do_callback();
        subcheck->value(part->kit[n].Psubenabled);
        subcheck->do_callback();

        sendtoeffect->value(part->kit[n].Psendtoparteffect + 1);
        if (part->kit[n].Psendtoparteffect == 127)
            sendtoeffect->value(0);
        this->redraw();} {}
  }
  Function {init(Part *part_, int n_, PartUI *partui_)} {open return_type void
  } {
    code {//
      part = part_;
      n = n_;
      partui = partui_;
      make_window();
      //partkititem->show();
      end();} {}
  }
  Function {~PartKitItem()} {open
  } {
    code {partkititem->hide();} {}
  }
  decl {Part *part;} {}
  decl {int n;} {}
  decl {char label[10];} {}
  decl {PartUI *partui;} {}
}

class PartUI {open : {public Fl_Group, private MiscFuncs}
} {
  Function {make_window(void)} {private return_type void
  } {
    Fl_Window partgroup {
      private xywh {779 890 385 170} type Single color 50 hide
      class Fl_Group
    } {
      Fl_Choice {} {
        label Mode
        callback {//
            switch (o->value())
            {
                case 0: // Poly (implies no legato)
                    part->Ppolymode = 1;
                    part->Plegatomode = 0;
                    setSaveRequired();
                    break;
                case 1: // Mono (implies no legato)
                    part->Ppolymode = 0;
                    part->Plegatomode = 0;
                    setSaveRequired();
                    break;
                case 2: // Legato (implies mono)
                    part->Ppolymode = 0;
                    part->Plegatomode = 1;
                    setSaveRequired();
                    break;
                default:
                    break;
            }}
        tooltip {Poly, Mono or Legato mode} xywh {195 25 80 18} down_box BORDER_BOX color 50 labelsize 10 textfont 1 textsize 10
        code0 {o->add("Poly"); o->add("Mono"); o->add("Legato");}
        code1 {if (part->Ppolymode) o->value(0); else o->value(1);}
        code2 {if (!part->Ppolymode && part->Plegatomode) o->value(2);}
      } {}
      Fl_Check_Button {} {
        label NoteOn
        callback {//
            part->Pnoteon = o->value();
            setSaveRequired();}
        tooltip {Whether this Part receives NoteOn messages} xywh {20 63 14 14} down_box DOWN_BOX color 50 labelsize 10 align 8
        code0 {o->value(part->Pnoteon);}
      }
      Fl_Check_Button {} {
        label Portamento
        callback {//
            part->ctl->portamento.portamento = o->value();
            setSaveRequired();}
        tooltip {Enable/Disable portamento on this Part} xywh {20 77 14 14} down_box DOWN_BOX color 50 labelsize 10 align 8
        code0 {o->value(part->ctl->portamento.portamento);}
      }
      Fl_Choice keylimitlist {
        label {Key Limit}
        callback {//
              int val = 0;
              val = atoi(o->text());
              part->setkeylimit(val);
              setSaveRequired();}
        tooltip {Key Limit} xywh {60 128 43 18} down_box BORDER_BOX color 50 labelsize 10 textfont 1 textsize 10
      } {}
      Fl_Spinner {} {
        label {Key Shift}
        callback {//
            part->Pkeyshift= o->value() + 64;
            setSaveRequired();}
        xywh {60 110 42 18} color 50 labelsize 10 minimum -12 maximum 12 textsize 10
        code0 {o->range(-12.0, 12.0);}
        code1 {o->value(part->Pkeyshift - 64);}
      }
      Fl_Button instrumentButton {
        label Instrument
        callback {//
            int event = Fl::event_button();
            switch (event)
            {
                case FL_LEFT_MOUSE:
                    progbanksui->Show(npart);
                    break;

                case FL_MIDDLE_MOUSE:
                    break;

                case FL_RIGHT_MOUSE:
                    showInstrumentEditWindow(part);
                    break;

                default:
                    break;
            }}
        tooltip {Who knows what will happen?} xywh {82 3 298 19} box THIN_DOWN_BOX color 50 labelsize 11 align 20
        code0 {//
            o->copy_label(part->Pname.c_str());
            o->tooltip(instrumenttooltip.c_str());}
      }
      Fl_Dial {} {
        label Pan
        callback {//
            part->setPpanning(o->value());
            setSaveRequired();}
        tooltip {Part panning} xywh {250 52 32 32} box ROUND_UP_BOX color 50 labelsize 10 maximum 127 step 1
        code0 {o->value(part->Ppanning);}
        class WidgetPDial
      }
      Fl_Dial {} {
        label Volume
        callback {//
            part->setPvolume(o->value());
            setSaveRequired();}
        tooltip {Part volume} xywh {310 48 36 36} box ROUND_UP_BOX color 50 labelsize 10 maximum 127 step 1
        code0 {o->value(part->Pvolume);}
        class WidgetPDial
      }
      Fl_Group VelocitySpinners {
        label Velocity open
        xywh {117 108 96 40} color 50 labelsize 10
      } {
        Fl_Spinner {} {
          label Sensitivity
          callback {//
              setSaveRequired();}
          tooltip {Velocity sensitivity} xywh {170 110 40 18} color 50 labelsize 10 textsize 10
        }
        Fl_Spinner {} {
          label Offset
          callback {setSaveRequired();}
          tooltip {Velocity offset} xywh {170 128 40 18} color 50 labelsize 10 textsize 10
        }
      }
      Fl_Check_Button partenabled {
        label Enabled
        callback {synth->partEnable(npart, lrintf(o->value()));}
        tooltip {Turn part On/Off} xywh {20 50 14 14} down_box DOWN_BOX color 50 labelsize 10 align 8
        code0 {o->value(part->Penabled);}
      }
      Fl_Spinner {} {
        label Midi
        callback {//
            part->midichannel = lrintf(o->value()) - 1;
            setSaveRequired();}
        tooltip {Midi channel} xywh {33 25 42 18} color 50 labelsize 11 maximum 16 textsize 10
        code0 {o->value(part->midichannel + 1);}
      }
      Fl_Pack toSysEfx {
        label {System Effect Sends  } open
        tooltip {System effect sends} xywh {230 100 150 45} type HORIZONTAL box THIN_DOWN_FRAME color 50 labelsize 11 align 2
        code0 {o->spacing(8);}
        code1 {//
            for (int i = 0; i < NUM_SYS_EFX; ++i)
            {
                psyef[i] = new PartSysEffSend(0, 0, 27, 27);
                psyef[i]->init(npart, i);
            }}
      } {}
      Fl_Button {} {
        label Controllers
        callback {ctlwindow->show();}
        tooltip {Midi controller settings} xywh {81 25 75 18} box PLASTIC_UP_BOX color 22 labelsize 10
      }
      Fl_Spinner minkcounter {
        label {Min Note}
        callback {//
            part->Pminkey = o->value();
            if (part->Pminkey>part->Pmaxkey)
                o->textcolor(FL_RED);
            else
                o->textcolor(FL_BLACK);
            setSaveRequired();}
        tooltip {Minimum note the part receives} xywh {170 72 40 17} color 50 labelsize 10 minimum 0 maximum 127 textsize 10
        code0 {o->range(0.0, 127.0);o->step(1.0);}
        code1 {o->value(part->Pminkey);}
      }
      Fl_Spinner maxkcounter {
        label {Max Note}
        callback {part->Pmaxkey = o->value();
            if (part->Pminkey > part->Pmaxkey)
                o->textcolor(FL_RED);
            else
                o->textcolor(FL_BLACK);}
        tooltip {Maximum note the part receives} xywh {170 50 40 17} color 50 labelsize 10 minimum 0 maximum 127 textsize 10
        code0 {o->range(0.0, 127.0);o->step(1.0);}
        code1 {o->value(part->Pmaxkey);}
      }
      Fl_Button {} {
        label m
        callback {//
            if (part->lastnote >= 0)
                minkcounter->value(part->lastnote);
            minkcounter->do_callback();
            maxkcounter->do_callback();
            setSaveRequired();}
        tooltip {set minimum note to the last note played} xywh {211 78 14 14} box PLASTIC_UP_BOX color 22 labelsize 10
      }
      Fl_Button {} {
        label M
        callback {//
            if (part->lastnote >= 0)
                maxkcounter->value(part->lastnote);
            maxkcounter->do_callback();
            minkcounter->do_callback();}
        tooltip {set maximum key to the last pressed key} xywh {212 48 14 14} box PLASTIC_UP_BOX color 22 labelsize 10
      }
      Fl_Button {} {
        label R
        callback {//
            minkcounter->value(0);
            minkcounter->do_callback();
            maxkcounter->value(127);
            maxkcounter->do_callback();}
        tooltip {reset the minimum key to 0 and maximum key to 127} xywh {211 63 14 14} box PLASTIC_UP_BOX color 22 labelsize 10
      }
    }
    Fl_Window ctlwindow {
      label Controllers
      private xywh {1195 752 460 130} type Single color 50 hide
    } {
      Fl_Check_Button {} {
        label Expr
        callback {//
            part->ctl->expression.receive = o->value();
            setSaveRequired();}
        tooltip {Expression enable} xywh {155 55 45 20} box THIN_UP_BOX down_box DOWN_BOX color 50 labelsize 10
        code0 {o->value(part->ctl->expression.receive);}
      }
      Fl_Dial {} {
        label PanDpth
        callback {//
            part->ctl->panning.depth = o->value();
            setSaveRequired();}
        tooltip {Panning Depth} xywh {10 55 30 30} color 50 labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->panning.depth);}
        class WidgetPDial
      }
      Fl_Dial {} {
        label FltCut
        callback {//
            part->ctl->filtercutoff.depth = o->value();
            setSaveRequired();}
        tooltip {Filter Cutoff depth} xywh {90 55 30 30} color 50 labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->filtercutoff.depth);}
        class WidgetPDial
      }
      Fl_Dial {} {
        label FltQ
        callback {//
            part->ctl->filterq.depth = o->value();
            setSaveRequired();}
        tooltip {Filter Q depth} xywh {50 55 30 30} color 50 labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->filterq.depth);}
        class WidgetPDial
      }
      Fl_Dial {} {
        label BwDpth
        callback {//
            part->ctl->bandwidth.depth = o->value();
            setSaveRequired();}
        tooltip {BandWidth depth} xywh {125 10 30 30} color 50 labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->bandwidth.depth);}
        class WidgetPDial
      }
      Fl_Dial {} {
        label ModWh
        callback {//
            part->ctl->modwheel.depth = o->value();
            setSaveRequired();}
        tooltip {Modulation Wheel depth} xywh {50 10 30 30} color 50 labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->modwheel.depth);}
        class WidgetPDial
      }
      Fl_Counter {} {
        label {PWheelB.Rng (cents)}
        callback {//
            part->ctl->pitchwheel.bendrange = o->value();
            setSaveRequired();}
        tooltip {Pitch Wheel Bend Range (cents)} xywh {165 15 110 20} color 50 labelsize 10 align 1 minimum -6400 maximum 6400 step 1
        code0 {o->value(part->ctl->pitchwheel.bendrange);}
        code1 {o->lstep(100);}
      }
      Fl_Check_Button {} {
        label FMamp
        callback {//
            part->ctl->fmamp.receive = o->value();
            setSaveRequired();}
        tooltip {FM amplitude enable} xywh {205 55 60 20} box THIN_UP_BOX down_box DOWN_BOX color 50 labelsize 10
        code0 {o->value(part->ctl->fmamp.receive);}
      }
      Fl_Check_Button {} {
        label Vol
        callback {//
            part->ctl->volume.receive = o->value();
            setSaveRequired();}
        tooltip {Volume enable} xywh {155 80 45 20} box THIN_UP_BOX down_box DOWN_BOX color 50 labelsize 10
        code0 {o->value(part->ctl->volume.receive);}
      }
      Fl_Check_Button {} {
        label Sustain
        callback {//
            part->ctl->sustain.receive = o->value();
            if (part->ctl->sustain.receive == 0)
            {
                part->RelaseSustainedKeys();
                part->ctl->setsustain(0);
            }
            setSaveRequired();}
        tooltip {Sustain pedal enable} xywh {205 80 60 20} box THIN_UP_BOX down_box DOWN_BOX color 50 labelsize 10
        code0 {o->value(part->ctl->sustain.receive);}
      }
      Fl_Button {} {
        label Close
        callback {ctlwindow->hide();}
        xywh {330 105 95 20} box THIN_UP_BOX color 50
      }
      Fl_Button {} {
        label {Reset all controllers}
        callback {//
            part->SetController(C_resetallcontrollers,0);
            setSaveRequired();}
        xywh {5 105 210 20} box THIN_UP_BOX color 50
      }
      Fl_Group {} {
        label Portamento open
        xywh {280 15 120 85} box ENGRAVED_FRAME color 50 labelfont 1 labelsize 10
      } {
        Fl_Check_Button {} {
          label Rcv
          callback {//
            part->ctl->portamento.receive = o->value();
            setSaveRequired();}
          tooltip {Receive Portamento Controllers} xywh {285 20 40 20} box THIN_UP_BOX down_box DOWN_BOX color 50 labelsize 10
          code0 {o->value(part->ctl->portamento.receive);}
        }
        Fl_Dial {} {
          label time
          callback {//
            part->ctl->portamento.time = o->value();
            setSaveRequired();}
          tooltip {Portamento time} xywh {285 60 25 25} color 50 labelsize 10 maximum 127 step 1
          code0 {o->value(part->ctl->portamento.time);}
          class WidgetPDial
        }
        Fl_Counter {} {
          label thresh
          callback {//
            part->ctl->portamento.pitchthresh = o->value();
            setSaveRequired();}
          tooltip {Minimum or max. difference of the notes in order to do the portamento (x 100 cents)} xywh {340 20 50 20} type Simple color 50 labelsize 10 minimum 0 maximum 127 step 1
          code0 {o->value(part->ctl->portamento.pitchthresh);}
        }
        Fl_Check_Button {} {
          label {th.type}
          callback {//
              part->ctl->portamento.pitchthreshtype = o->value();
              setSaveRequired();}
          tooltip {Threshold type (min/max)} xywh {370 70 15 15} down_box DOWN_BOX color 50 labelsize 10 align 2
          code0 {o->value(part->ctl->portamento.pitchthreshtype);}
        }
        Fl_Box {} {
          label {x100 cnt.}
          xywh {340 50 55 15} color 50 labelsize 10 align 16
        }
        Fl_Dial {} {
          label {t.dn/up}
          callback {//
              int x = o->value();
              part->ctl->portamento.updowntimestretch = x;
              setSaveRequired();}
          tooltip {Portamento time stretch (up/down)} xywh {315 60 25 25} color 50 labelsize 10 maximum 127 step 1
          code0 {o->value(part->ctl->portamento.updowntimestretch);}
          class WidgetPDial
        }
      }
      Fl_Group {} {
        label Resonance open
        xywh {400 15 45 85} box ENGRAVED_BOX color 50 labelfont 1 labelsize 10
      } {
        Fl_Dial {} {
          label BWdpth
          callback {//
            part->ctl->resonancebandwidth.depth = o->value();
            setSaveRequired();}
          tooltip {BandWidth controller depth} xywh {410 60 25 25} color 50 labelsize 10 maximum 127 step 1
          code0 {o->value(part->ctl->resonancebandwidth.depth);}
          class WidgetPDial
        }
        Fl_Dial {} {
          label CFdpth
          callback {//
            part->ctl->resonancecenter.depth = o->value();
            setSaveRequired();}
          tooltip {Center Frequency controller Depth} xywh {410 20 25 25} color 50 labelsize 10 maximum 127 step 1
          code0 {o->value(part->ctl->resonancecenter.depth);}
          class WidgetPDial
        }
      }
      Fl_Check_Button {} {
        label {Exp MWh}
        callback {//
            part->ctl->modwheel.exponential = o->value();
            setSaveRequired();}
        tooltip {Exponential modulation wheel} xywh {10 15 40 25} down_box DOWN_BOX color 50 labelsize 10 align 148
        code0 {o->value(part->ctl->modwheel.exponential);}
      }
      Fl_Check_Button {} {
        label {Exp BW}
        callback {//
            part->ctl->bandwidth.exponential = o->value();
            setSaveRequired();}
        tooltip {Exponential BandWidth Controller} xywh {85 15 35 25} down_box DOWN_BOX color 50 labelsize 10 align 148
        code0 {o->value(part->ctl->bandwidth.exponential);}
      }
    }
    Fl_Window partfx {
      label {Part's Insert Effects}
      private xywh {778 750 390 145} type Single color 50 hide
    } {
      Fl_Counter inseffnocounter {
        label {FX No.}
        callback {//
            ninseff = o->value() - 1;
            insefftype->value(part->partefx[ninseff]->geteffect());
            // insefftype->do_callback();
            inseffectui->refresh(part->partefx[ninseff]);
            int x = part->Pefxroute[ninseff];
            if (x == 127)
                x = 1;
            bypasseff->value(part->Pefxbypass[ninseff]);
            sendtochoice->value(x);
            setSaveRequired();}
        xywh {5 110 80 20} type Simple color 50 labelfont 1 align 6 minimum 1 maximum 127 step 1 textfont 1
        code0 {o->bounds(1,NUM_PART_EFX);}
        code1 {o->value(ninseff+1);}
      }
      Fl_Choice insefftype {
        label EffType
        callback {//
            synth->lockSharable(); // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            part->partefx[ninseff]->changeeffect(o->value());
            synth->unlockSharable();
            setSaveRequired();
            inseffectui->refresh(part->partefx[ninseff]);} open
        xywh {155 110 70 15} down_box BORDER_BOX color 50 labelsize 10 align 6
        code0 {o->value(part->partefx[ninseff]->geteffect());}
      } {
        MenuItem {} {
          label {No Effect}
          xywh {35 35 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Reverb
          xywh {45 45 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Echo
          xywh {55 55 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Chorus
          xywh {65 65 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Phaser
          xywh {70 70 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label AlienWah
          xywh {80 80 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label Distortion
          xywh {90 90 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label EQ
          xywh {100 100 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label DynFilter
          xywh {110 110 100 20} labelfont 1 labelsize 10
        }
      }
      Fl_Group inseffectuigroup {open
        xywh {5 5 380 100} box FLAT_BOX color 50
      } {
        Fl_Group inseffectui {open
          xywh {5 5 380 95} color 50
          code0 {o->init(part->partefx[ninseff]);}
          class EffUI
        } {}
      }
      Fl_Button {} {
        label Close
        callback {partfx->hide();}
        xywh {325 115 60 20} box THIN_UP_BOX color 50
      }
      Fl_Choice sendtochoice {
        label {Send To.}
        callback {//
            part->Pefxroute[ninseff] = lrintf(o->value());
            if (part->Pefxroute[ninseff] == 2)
                part->partefx[ninseff]->setdryonly(true);
            else
                part->partefx[ninseff]->setdryonly(false);
            setSaveRequired();} open
        xywh {235 110 80 15} down_box BORDER_BOX color 50 labelsize 10 align 6
        code0 {int x=part->Pefxroute[ninseff]; if (x==127) x=1;}
        code1 {o->value(x);}
      } {
        MenuItem {} {
          label {Next Effect}
          xywh {45 45 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {Part Out}
          xywh {55 55 100 20} labelfont 1 labelsize 10
        }
        MenuItem {} {
          label {Dry Out}
          xywh {65 65 100 20} labelfont 1 labelsize 10
        }
      }
      Fl_Check_Button bypasseff {
        label bypass
        callback {//
            part->Pefxbypass[ninseff] = ((o->value()) != 0);
            setSaveRequired();}
        tooltip {if the effect is not used (is bypassed)} xywh {90 110 60 15} down_box DOWN_BOX color 50 labelsize 11
        code0 {int x=part->Pefxbypass[ninseff];o->value(x);}
      }
      Fl_Button {} {
        label C
        callback {presetsui->copy(part->partefx[ninseff]);}
        xywh {90 127 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
      }
      Fl_Button {} {
        label P
        callback {//
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            synth->lockSharable();
            presetsui->paste(part->partefx[ninseff], inseffectui);
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            synth->unlockSharable();}
        xywh {120 127 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
      }
    }
    Fl_Window instrumentkitlist {
      label {Instrument Kit}
      xywh {69 414 670 370} type Single color 50 hide
    } {
      Fl_Button {} {
        label {Close Window}
        callback {//
            if (saveRequired)
                saveProgram();
            instrumentkitlist->hide();}
        xywh {558 350 105 18} box THIN_UP_BOX color 50 labelsize 12
      }
      Fl_Scroll kitlist {open
        xywh {0 15 670 330} type VERTICAL box THIN_UP_BOX color 50
        code0 {if (part->Pkitmode==0) o->deactivate();}
      } {
        Fl_Pack {} {open
          xywh {0 20 670 320} color 50
          code0 {//
              for (int i = 0; i < NUM_KIT_ITEMS; i++)
              {
                  partkititem[i] = new PartKitItem(0, 0, 670, 20, "");
                  partkititem[i]->init(part, i, this);
              }}
        } {}
      }
      Fl_Box {} {
        label {No.}
        xywh {5 0 25 15} color 50 labelfont 1 labelsize 11 align 18
      }
      Fl_Box {} {
        label {M.}
        xywh {55 0 25 15} color 50 labelfont 1 labelsize 11 align 18
      }
      Fl_Box {} {
        label {Min.k}
        xywh {235 0 40 15} color 50 labelfont 1 labelsize 11 align 18
      }
      Fl_Box {} {
        label {Max.k}
        xywh {345 0 40 15} color 50 labelfont 1 labelsize 11 align 18
      }
      Fl_Box {} {
        label ADsynth
        xywh {405 0 50 15} color 50 labelfont 1 labelsize 11 align 18
      }
      Fl_Box {} {
        label SUBsynth
        xywh {470 0 60 15} color 50 labelfont 1 labelsize 11 align 18
      }
      Fl_Choice kitmode {
        label Mode
        callback {//
            part->Pkitmode = o->value();
            if (part->Pkitmode == 0)
                kitlist->deactivate();
            else
                kitlist->activate();
            setSaveRequired();} open
        xywh {35 350 70 15} down_box BORDER_BOX color 50 labelsize 11 textfont 1 textsize 11
        code0 {o->value(part->Pkitmode);}
      } {
        MenuItem {} {
          label OFF
          xywh {0 0 100 20} labelfont 1 labelsize 11
        }
        MenuItem {} {
          label MULTI
          xywh {10 10 100 20} labelfont 1 labelsize 11
        }
        MenuItem {} {
          label SINGLE
          xywh {20 20 100 20} labelfont 1 labelsize 11
        }
      }
      Fl_Check_Button drummode {
        label {Drum mode}
        callback {//
            part->Pdrummode = o->value();
            setSaveRequired();}
        xywh {285 350 70 15} down_box DOWN_BOX color 50 labelsize 10
        code0 {o->value(part->Pdrummode);}
      }
      Fl_Box {} {
        label {FX.r.}
        xywh {620 0 30 15} color 50 labelfont 1 labelsize 11 align 18
      }
      Fl_Box {} {
        label PADsynth
        xywh {540 0 60 15} color 50 labelfont 1 labelsize 11 align 18
      }
    }
    Fl_Window instrumenteditwindow {
      label {Instrument Edit}
      callback {//
        instrumenteditwindow->hide();} open
      xywh {1408 273 400 305} type Single color 51 when 6 hide
      code0 {//}
    } {
      Fl_Group parteditgroup {
        xywh {0 0 420 267} box ENGRAVED_FRAME color 50
        code0 {//}
      } {
        Fl_Input programname {
          label {Program name}
          callback {//
              part->Pname = string(o->value());
              progbanksui->CurrentProgram->copy_label(o->value());
              progbanksui->CurrentProgram->hide();
              progbanksui->CurrentProgram->show();
              progBanks->programList[part->partProgram] = string(o->value());
              progbanksui->refreshPrograms();
              setSaveRequired();}
          xywh {95 21 300 20} labelsize 11 textsize 11
          code0 {/*code*/}
        }
        Fl_Input author {
          label {Author / Copyright}
          callback {//
            part->info.Pauthor = string(o->value());
            setSaveRequired();}
          xywh {5 155 390 42} type Multiline color 55 labelsize 11 align 5 textsize 11
          code0 {o->maximum_size(MAX_INFO_TEXT_SIZE);}
          code1 {o->value(part->info.Pauthor.c_str());}
        }
        Fl_Input comments {
          label Comments
          callback {//
            part->info.Pcomments = string(o->value());
            setSaveRequired();}
          xywh {5 219 390 42} type Multiline color 55 labelsize 11 align 5 textsize 11
          code0 {o->maximum_size(MAX_INFO_TEXT_SIZE);}
          code1 {o->value(part->info.Pcomments.c_str());}
        }
      }
      Fl_Check_Button adsynenabledcheck {
        label ADDsynth
        callback {//
            if ((part->kit[0].Padenabled = lrintf(o->value())))
                adeditbutton->activate();
            else
            {
                if (adnoteui)
                    adnoteui->ADnoteGlobalParameters->hide();
                adeditbutton->deactivate();
            }
            setSaveRequired();}
        tooltip {Enable ADnote} xywh {150 50 85 20} box PLASTIC_UP_BOX down_box DOWN_BOX color 245 selection_color 242 labelfont 1 labelsize 10
        code1 {o->value(part->kit[0].Padenabled);}
      }
      Fl_Check_Button subsynenabledcheck {
        label SUBsynth
        callback {//
            if ((part->kit[0].Psubenabled = lrintf(o->value())))
                subeditbutton->activate();
            else
            {
                if (subnoteui)
                    subnoteui->SUBparameters->hide();
                subeditbutton->deactivate();
            }
            setSaveRequired();}
        tooltip {Enable  SUBnote} xywh {150 80 85 20} box PLASTIC_UP_BOX down_box DOWN_BOX color 245 selection_color 242 labelfont 1 labelsize 10
        code1 {o->value(part->kit[0].Psubenabled);}
      }
      Fl_Check_Button padsynenabledcheck {
        label PADsynth
        callback {//
            if ((part->kit[0].Ppadenabled = lrintf(o->value())))
            {
                part->kit[0].padpars->applyparameters(false);
                padeditbutton->activate();
            }
            else
            {
                if (padnoteui)
                    padnoteui->padnotewindow->hide();
                padeditbutton->deactivate();
            }
            setSaveRequired();}
        tooltip {Enable  PADnote} xywh {150 110 85 20} box PLASTIC_UP_BOX down_box DOWN_BOX color 245 selection_color 242 labelfont 1 labelsize 10
        code1 {o->value(part->kit[0].Ppadenabled);}
      }
      Fl_Button {} {
        label {Kit Edit}
        callback {//
            if (part->Pkitmode)
                kitlist->activate();
            else
                kitlist->deactivate();
            kitmode->value(part->Pkitmode);
            drummode->value(part->Pdrummode);
            for (int i = 0; i < NUM_KIT_ITEMS; ++i)
                partkititem[i]->refresh();
            instrumentkitlist->show();}
        xywh {330 65 51 20} box PLASTIC_UP_BOX color 245 selection_color 220 labelfont 1 labelsize 10 align 128
      }
      Fl_Button {} {
        label Effects
        callback {partfx->show();}
        xywh {330 97 51 20} box PLASTIC_UP_BOX color 245 labelfont 1 labelsize 10
      }
      Fl_Button adeditbutton {
        label Edit
        callback {showparameters(0, 0);}
        tooltip {Edit ADnote parameters} xywh {240 50 34 20} box PLASTIC_UP_BOX color 246 selection_color 242 labelfont 1 labelsize 9 align 128
        code0 {if (part->kit[0].Padenabled==0) o->deactivate();}
      }
      Fl_Button subeditbutton {
        label Edit
        callback {showparameters(0, 1);}
        tooltip {Edit SUBnote parameters} xywh {240 80 36 20} box PLASTIC_UP_BOX color 246 selection_color 242 labelfont 1 labelsize 9 align 128
        code0 {if (part->kit[0].Psubenabled==0) o->deactivate();}
      }
      Fl_Button padeditbutton {
        label Edit
        callback {showparameters(0, 2);}
        tooltip {Edit PADnote parameters} xywh {240 110 36 20} box PLASTIC_UP_BOX color 246 selection_color 242 labelfont 1 labelsize 9 align 128
        code0 {if (part->kit[0].Ppadenabled==0) o->deactivate();}
      }
      Fl_Button savebutton {
        label Save
        callback {part->saveProgram();}
        xywh {277 275 50 20} box PLASTIC_UP_BOX color 151 labelsize 11
      }
      Fl_Button closebutton {
        label Close
        callback {//
            if (saveRequired)
                part->saveProgram();
            instrumenteditwindow->hide();}
        xywh {343 275 50 20} box PLASTIC_UP_BOX color 245 labelsize 11
      }
    }
  }
  Function {PartUI(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {open
  } {
    code {//
        part = NULL;
        adnoteui = NULL;
        subnoteui = NULL;
        padnoteui = NULL;
        progbanksui = NULL;
        lastkititem = -1;
        instrumenttooltip = "Default instrument";
        saveRequired = false;} {}
  }
  Function {Init(Part *part_, int npart_, ProgramBanksUI *progbanksui_)} {open return_type void
  } {
    code {//
        savebutton = NULL;
        progbanksui = progbanksui_;
        part = part_;
        npart = npart_;
        ninseff = 0;
        make_window();
        partgroup->position(this->parent()->x() + 2, this->parent()->y() + 2);
        partgroup->show();
        end();
        // if (Runtime.ui.showinstrumentinfo!=0) instrumenteditwindow->show();
        int klimits[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 30, 50, 100, 0};

        keylimitlist->add("OFF");
        int k = 0;
        int val = -1;
        char tmp[10];
        while (klimits[k] != 0)
        {
            sprintf(tmp, "%d", klimits[k]);
            keylimitlist->add(tmp);
            if ((val == -1))
            {
                if (klimits[k]>part->Pkeylimit)
                    val = k;
            }
            k++;
        }
        if (val == -1)
            val = k;
        keylimitlist->value(val);} {}
  }
  Function {showparameters(int kititem, int engine)} {open return_type void
  } {
    code {//
        if (engine == -1)
        {   // this is used if I want to clear the engine from the part
            if (kititem == lastkititem)
                kititem = -1;
            else
                kititem = lastkititem;
        }

        if (kititem != lastkititem)
        {
            if (adnoteui != NULL)
                delete adnoteui;
            if (subnoteui != NULL)
                delete subnoteui;
            if (padnoteui != NULL)
                delete padnoteui;
            adnoteui = NULL;
            subnoteui = NULL;
            padnoteui = NULL;
            lastkititem = kititem;

            if (kititem >= NUM_KIT_ITEMS)
                return; // bad kit item
            if (kititem < 0)
                return;

            if (part->kit[kititem].adpars != NULL)
                adnoteui = new ADnoteUI(part->kit[kititem].adpars);

            if (part->kit[kititem].subpars != NULL)
                subnoteui = new SUBnoteUI(part->kit[kititem].subpars);

            if (part->kit[kititem].padpars != NULL)
                padnoteui = new PADnoteUI(part->kit[kititem].padpars);
        }
        switch (engine)
        {
            case 0:
                if (adnoteui)
                    adnoteui->ADnoteGlobalParameters->show();
                break;
            case 1:
                if (subnoteui)
                    subnoteui->SUBparameters->show();
                break;
            case 2:
                if (adnoteui)
                    padnoteui->padnotewindow->show();
                break;
            default:
                break;
        }} {}
  }
  Function {~PartUI()} {open
  } {
    code {//
        if (adnoteui != NULL)
            delete adnoteui;
        if (subnoteui != NULL)
            delete subnoteui;
        if (padnoteui != NULL)
            delete padnoteui;
        partgroup->hide();
        ctlwindow->hide();
        delete ctlwindow;
        partfx->hide();
        delete partfx;
        instrumentkitlist->hide();
        delete instrumentkitlist;
        instrumenteditwindow->hide();
        delete instrumenteditwindow;} {}
  }
  Function {refreshInstrumentLabel(unsigned char bk, string bankname,
                                   unsigned char prog, string progname)} {open return_type void
  } {
    code {//
        instrumenttooltip = string("Bank ") + asString(bk + 1) + string(" ") + bankname;
        string progtag = asString(prog + 1) + string(": ") + progname;
        instrumentButton->copy_label(progtag.c_str());
        instrumentButton->tooltip(instrumenttooltip.c_str());} {}
  }
  Function {showInstrumentEditWindow(Part *part_)} {open return_type void
  } {
    code {//
        progbanksui->setPart(part = part_);
        programname->value(part->Pname.c_str());
        author->value(part->info.Pauthor.c_str());
        comments->value(part->info.Pcomments.c_str());
        adsynenabledcheck->value(part->kit[0].Padenabled);
        if ((part->kit[0].Padenabled))
            adeditbutton->activate();
        else
            adeditbutton->deactivate();
        padsynenabledcheck->value(part->kit[0].Ppadenabled);
        if (part->kit[0].Ppadenabled)
            padeditbutton->activate();
        else
            padeditbutton->deactivate();
        subsynenabledcheck->value(part->kit[0].Psubenabled);
        if (part->kit[0].Psubenabled)
            subeditbutton->activate();
        else
            subeditbutton->deactivate();

        for (int i = 0; i < NUM_KIT_ITEMS; i++)
        {
            if (part->kit[i].Penabled)
            {
                partkititem[i]->partkititemgroup->activate();
            }
            else
                partkititem[i]->partkititemgroup->deactivate();
                partkititem[i]->refresh();
        }
        instrumenteditwindow->copy_label(
            (string("Bank ") + asString(part->partBank + 1)
             + string(", Program ") + asString(part->partProgram + 1)
             + string(" ") + part->Pname).c_str());
        instrumenteditwindow->show();
    } {}
  }
  Function {hideInstrumentEditWindow(void)} {open return_type void
  } {
    code {//
        if (adnoteui)
            adnoteui->ADnoteGlobalParameters->hide();
        if (subnoteui)
            subnoteui->SUBparameters->hide();
        if (adnoteui)
            padnoteui->padnotewindow->hide();
        instrumenteditwindow->hide();} {}
  }
  Function {setSaveRequired(void)} {open return_type void
  } {
    code {//
        saveRequired = true;
        if(savebutton!=NULL) savebutton->activate();} {}
  }
  Function {saveProgram(void)} {open selected return_type bool
  } {
    code {//
        if(part->saveProgram())
        {
            saveRequired = false;
            progbanksui->refreshPrograms();
            return true;
        }
        else
        {
            fl_alert("Failed to save program");
            return false;
        }} {}
  }
  decl {Part *part;} {}
  decl {ProgramBanksUI *progbanksui;} {}
  decl {ADnoteUI *adnoteui;} {}
  decl {SUBnoteUI *subnoteui;} {}
  decl {PADnoteUI *padnoteui;} {}
  decl {PartSysEffSend *psyef[NUM_SYS_EFX];} {}
  decl {int npart;} {public}
  decl {int ninseff;} {}
  decl {int lastkititem;} {}
  decl {PartKitItem *partkititem[NUM_KIT_ITEMS];} {}
  decl {string instrumenttooltip;} {}
  decl {bool saveRequired;} {}
}
